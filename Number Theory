-----------------------------------------
Find divisors sqrt : O(sqrt(N))
-----------------------------------------
vector<int> find_divisors(int n) {
    vector<int> divisors;
    for (int i = 1; i * i <= n; ++i) {
        if (n % i == 0) {
            divisors.push_back(i);
            if (i != n / i) {
                divisors.push_back(n / i);
            }
        }
    }
    return divisors;
}
------------------------------------------
Find number of divisors from 1 to N : O(NlogN)
------------------------------------------
const int N = 1e6 + 9;
int d[N];
int main() {
    for (int i = 1; i < N; ++i) {
        for (int j = i; j < N; j += i) {
            d[j]++;
            d[j] += i; // sum of divisors
        }
    }
}
------------------------------------------
Is Prime or not : O(sqrt(N) / 2) : good
------------------------------------------
bool is_prime(int n){ 
    if(n == 2) return true;
    if(n == 1 or n % 2 == 0) return false;
    
    for(int i = 3; i * i <= n; i += 2){
        if(n % i == 0) return false;
    }
    return true;
}
-------------------------------------------
Sieve of Erathesthones to get all Prime : O(N log log N) 
-------------------------------------------
const int N = 1e7;
bool prime[N];

void sieve() {
    fill(prime, prime + N + 1, true); // Initialize all as prime
    prime[0] = prime[1] = false;      // 0 and 1 are not prime
    prime[2] = true;                  // 2 is prime

    // Mark even numbers > 2 as non-prime
    for (int i = 4; i <= N; i += 2) {
        prime[i] = false;
    }

    // Your provided loop for odd numbers
    for (int i = 3; i * i <= N; i += 2) {
        if (prime[i]) {
            for (int j = i * i; j <= N; j += 2 * i) {
                prime[j] = false;
            }
        }
    }
}
------------------------------------------
Is Prime : O(sqrt(N) / 3) : better
--------------------------------------------
bool is_prime(ll n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;

    for (ll i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}
----------------------------------------------------------------------
 Is Prime : miller rabin : n <= 18 , O(k log^3(n)) : best 
-----------------------------------------------------------------------
typedef long long ll;

ll mod_mul(ll a, ll b, ll mod) {
    ll res = 0;
    a %= mod;
    while (b > 0) {
        if (b & 1) res = (res + a) % mod;
        a = (2 * a) % mod;
        b >>= 1;
    }
    return res;
}

ll mod_exp(ll base, ll exp, ll mod) {
    ll res = 1;
    base %= mod;
    while (exp > 0) {
        if (exp & 1) res = mod_mul(res, base, mod);
        base = mod_mul(base, base, mod);
        exp >>= 1;
    }
    return res;
}

bool miller_rabin(ll n, ll a) {
    if (n % a == 0) return false;
    ll d = n - 1;
    while (d % 2 == 0) d /= 2;
    ll x = mod_exp(a, d, n);
    if (x == 1 || x == n - 1) return true;
    while (d != n - 1) {
        x = mod_mul(x, x, n);
        d *= 2;
        if (x == n - 1) return true;
    }
    return false;
}

bool is_prime(ll n) {
    if (n < 2) return false;
    if (n <= 3) return true;
    if (n % 2 == 0) return false;

    // Deterministic bases for n â‰¤ 10^18
    ll bases[] = {2, 3, 5, 7, 11, 13, 17};
    for (ll a : bases) {
        if (a > n - 2) break; // Skip unnecessary tests for small n
        if (!miller_rabin(n, a)) return false;
    }
    return true;
}
------------------------------------------------------------------------
Prime Factorization / Skeleton view of number : O(sqrt N)
-----------------------------------------------------------------------
vector<int> prime_factor(int n){
    vector<int> factor;
    for(int i = 2; i * i <= n; i++) {
        if(n % i == 0){
            while(n % i == 0) {
                factor.push_back(i);
                n /= i;
            }
        }
    }
    if(n > 1) factor.push_back(n);
    return factor;
}
---------------------------------------------------------------
Smallest Prime Factor :
---------------------------------------------------------------
const int N = 1e6 + 9;
int spf[N];
void smallest_prime_fact(){
    for (int i = 2; i < N; i++){
        spf[i] = i;
    }
    for (int i = 2; i < N; i++){
        for (int j = i; j < N; j += i){
            spf[j] = min(spf[j], i);
        }
    }
}
----------------------------------------------------------
Divisibility and large number : 
----------------------------------------------------
  string a; int b; cin >> a >> b;
  int ans = 0;
  for (int i = 0; i < a.size(); i++) {
    ans = (ans * 10LL % b + (a[i] - '0')) % b;
  }
  // ans = a % b;
  if (ans == 0) {
    cout << "a is divisible by b\n";
  }
  else {
    cout << "sad\n";
  }
  return 0;
}
-------------------------------------------------
Div by 2 : last digit is even
Div by 5 : last digit is 0 / 5
Div by 3 : Digit sum % 3 == 0
Div by 9 : Digit sum % 9 == 0
Div by 4 : last 2 Digit % 4 == 0
Div by 6 : divisible by both 2 , 3
Div by 11 : add and substract number sequentially % 11 == 0
-----------------------------------------------------
Every number has even divisors 
1 * 50 = 50 | 2 * 25 = 50 | 5 * 10 = 50   || divisors = 6 

Only perfect square has odd divisors
1 * 25 = 25 | 5 * 5 = 25  || divisors = 3

print number till 10^12 which has odd divisors :
ans : for(int i  = 1; i *i â‰¤ n; i++) cout << i * i << â€œ â€œ ;
1, 4, 9, 16, 25, 36, 49, 64 â€¦â€¦â€¦â€¦â€¦.
--------------------------------------------------------
The product of every consecutive k numbers is divisible by k . 
product of subarray numbers divisible by subarray length .
1 2 3 4 5 6 7 . .  . . . . . .
--------------------------------------------------------
A number d is a common divisor of x and y if it divides both.
ðŸ§  Mathematically:
d is a common divisor if
x % d == 0 && y % d == 0
ðŸ§ª Example:
Letâ€™s take x = 12, y = 18
Divisors of 12: 1, 2, 3, 4, 6, 12
Divisors of 18: 1, 2, 3, 6, 9, 18
ðŸ‘‰ Common divisors = 1, 2, 3, 6
ðŸ”§ How to find them:
Find gcd(x, y)
All divisors of gcd(x, y) are common divisors of x and y
    # Common Divisors of x & y = Divisors of gcd(x, y)
    # numbers of common divisors of (x, y) till N 
        count = N / gcd(x, y)
vector<int> commonDivisors(int x, int y, int n) {
    int g = gcd(x, y);
    vector<int> divisors;

    for (int i = 1; i * i <= g; ++i) {
        if (g % i == 0) {
            if (i <= n) divisors.push_back(i);
            if (g / i != i && g / i <= n) divisors.push_back(g / i);
        }
    }
    sort(divisors.begin(), divisors.end());
    return divisors;
}
------------------------------------------------------------------------
A number m is a common multiple of x and y if it is divisible by both.
ðŸ§  Mathematically:
m is a common multiple if
m % x == 0 && m % y == 0
ðŸ§ª Example:
Letâ€™s take x = 3, y = 4
Multiples of 3: 3, 6, 9, 12, 15, 18, ...
Multiples of 4: 4, 8, 12, 16, 20, ...
ðŸ‘‰ Common multiples = 12, 24, 36, 48, ...
ðŸ”§ How to find them:
Find lcm(x, y)
All multiples of lcm(x, y) are common multiples
    # Common Multiples of x & y = Multiples of lcm(x, y)
    # numbers of common Multiples of (x, y) till N 
        count = N / lcm(x, y)
-------------------------------------------------------
Formuala : 
-------------------------------------------------------
long long sum_natural(int n) {
    return n * (n + 1) / 2;
}

long long sum_odd(int n) {
    return 1LL * n * n;
}

long long sum_even(int n) {
    return 1LL * n * (n + 1);
}

long long sum_squares(int n) {
    return 1LL * n * (n + 1) * (2 * n + 1) / 6;
}

long long sum_cubes(int n) {
    long long s = 1LL * n * (n + 1) / 2;
    return s * s;
}

long long sum_fourth_powers(int n) {
    return (1LL * n * (n + 1) * (2 * n + 1) * (3 * n * n + 3 * n - 1)) / 30;
}

long long arithmetic_series_sum(int a, int d, int n) {
    return (1LL * n * (2 * a + (n - 1) * d)) / 2;
}

long long geometric_series_sum(int a, int r, int n) {
    if (r == 1)
        return 1LL * a * n;
    return 1LL * a * (pow(r, n) - 1) / (r - 1);
}

double infinite_geometric_sum(double a, double r) {
    if (fabs(r) >= 1) {
        cout << "Infinite geometric sum does not converge for |r| >= 1\n";
        return NAN;
    }
    return a / (1 - r);
}

double harmonic_sum(int n) {
    double sum = 0;
    for (int i = 1; i <= n; ++i)
        sum += 1.0 / i;
    return sum;
}

double telescoping_sum(int n) {
    double sum = 0;
    for (int i = 1; i <= n; ++i)
        sum += 1.0 / (i * (i + 1));
    return sum;
}
