-----------------------------------------
Find divisors sqrt : O(sqrt(N))
-----------------------------------------
vector<int> find_divisors(int n) {
    vector<int> divisors;
    for (int i = 1; i * i <= n; ++i) {
        if (n % i == 0) {
            divisors.push_back(i);
            if (i != n / i) {
                divisors.push_back(n / i);
            }
        }
    }
    return divisors;
}
------------------------------------------
Find number of divisors from 1 to N : O(NlogN)
------------------------------------------
const int N = 1e6 + 9;
int d[N];
int main() {
    for (int i = 1; i < N; ++i) {
        for (int j = i; j < N; j += i) {
            d[j]++;
            d[j] += i; // sum of divisors
        }
    }
}
------------------------------------------
Is Prime or not : O(sqrt(N) / 2) : good
------------------------------------------
bool is_prime(int n){ 
    if(n == 2) return true;
    if(n == 1 or n % 2 == 0) return false;
    
    for(int i = 3; i * i <= n; i += 2){
        if(n % i == 0) return false;
    }
    return true;
}
-------------------------------------------
Sieve to get all Prime : O(N log log N) 
-------------------------------------------
const int N = 1e7;
bool prime[N];

void sieve() {
    fill(prime, prime + N, true);
    prime[0] = prime[1] = false;  

    for (int i = 2; i * i < N; i++) {
        if (prime[i]) {
            for (int j = i * i; j < N; j += i) {
                prime[j] = false;
            }
        }
    }
}
------------------------------------------
Is Prime : O(sqrt(N) / 3) : better
--------------------------------------------
bool is_prime(ll n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;

    for (ll i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}
----------------------------------------------------------------------
 Is Prime : miller rabin : n <= 18 , O(k log^3(n)) : best 
-----------------------------------------------------------------------
typedef long long ll;

ll mod_mul(ll a, ll b, ll mod) {
    ll res = 0;
    a %= mod;
    while (b > 0) {
        if (b & 1) res = (res + a) % mod;
        a = (2 * a) % mod;
        b >>= 1;
    }
    return res;
}

ll mod_exp(ll base, ll exp, ll mod) {
    ll res = 1;
    base %= mod;
    while (exp > 0) {
        if (exp & 1) res = mod_mul(res, base, mod);
        base = mod_mul(base, base, mod);
        exp >>= 1;
    }
    return res;
}

bool miller_rabin(ll n, ll a) {
    if (n % a == 0) return false;
    ll d = n - 1;
    while (d % 2 == 0) d /= 2;
    ll x = mod_exp(a, d, n);
    if (x == 1 || x == n - 1) return true;
    while (d != n - 1) {
        x = mod_mul(x, x, n);
        d *= 2;
        if (x == n - 1) return true;
    }
    return false;
}

bool is_prime(ll n) {
    if (n < 2) return false;
    if (n <= 3) return true;
    if (n % 2 == 0) return false;

    // Deterministic bases for n â‰¤ 10^18
    ll bases[] = {2, 3, 5, 7, 11, 13, 17};
    for (ll a : bases) {
        if (a > n - 2) break; // Skip unnecessary tests for small n
        if (!miller_rabin(n, a)) return false;
    }
    return true;
}
------------------------------------------------------------------------
Prime Factorization / Skeleton view of number : O(sqrt N)
-----------------------------------------------------------------------
vector<int> prime_factor(int n){
    vector<int> factor;
    for(int i = 2; i * i <= n; i++) {
        if(n % i == 0){
            while(n % i == 0) {
                factor.push_back(i);
                n /= i;
            }
        }
    }
    if(n > 1) factor.push_back(n);
    return factor;
}
---------------------------------------------------------------
Smallest Prime Factor :
---------------------------------------------------------------
const int N = 1e6 + 9;
int spf[N];
void smallest_prime_fact(){
    for (int i = 2; i < N; i++){
        spf[i] = i;
    }
    for (int i = 2; i < N; i++){
        for (int j = i; j < N; j += i){
            spf[j] = min(spf[j], i);
        }
    }
}
----------------------------------------------------------
Divisibility and large number : 
----------------------------------------------------
  string a; int b; cin >> a >> b;
  int ans = 0;
  for (int i = 0; i < a.size(); i++) {
    ans = (ans * 10LL % b + (a[i] - '0')) % b;
  }
  // ans = a % b;
  if (ans == 0) {
    cout << "a is divisible by b\n";
  }
  else {
    cout << "sad\n";
  }
  return 0;
}
-------------------------------------------------
