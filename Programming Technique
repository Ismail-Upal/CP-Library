Difference Array : 
-----------------------------------
	int n; cin >> n; // n = 5 
	vector<int> v(n + 1); // {1, 3, 5, 2, 4}
	for(int i = 1; i <= n; i++) cin >> v[i];
	vector<int> diff(n + 1); // {1, 2, 2, -3, 2}
	for(int i = 1; i <= n; i++){
		diff[i] = v[i] - v[i - 1];
  	}
  	for(int i = 1; i <= n; i++) cout << diff[i] << " ";
  
  	// Find the original array by prefix sum
  	for(int i = 1; i <= n; i++){
		v[i] = v[i - 1] + diff[i];
	}
  	for(int i = 1; i <= n; i++) cout << v[i] << " ";
------------------------------------
2D Difference Array : 
------------------------------------
	const int N = 1e3 + 9;
	ll d[N][N], a[N][N];
	while (q--) {
		int x1, y1, x2, y2, x; cin >> x1 >> y1 >> x2 >> y2 >> x;
		d[x1][y1] += x;
		d[x2 + 1][y1] -= x;
		d[x1][y2 + 1] -= x;
		d[x2 + 1][y2 + 1] += x;
	}
	
	for (int i = 1; i <= n; ++i) {
		for (int j = 1; j <= m; ++j) {
	        	d[i][j] += d[i - 1][j] + d[i][j - 1] - d[i - 1][j - 1];
		}
	}
	
	for (int i = 1; i <= n; ++i) {
		for (int j = 1; j <= m; ++j) {
	            	a[i][j] += d[i][j];
	        }
	}
------------------------------------
2D Prefix :
------------------------------------
	const int N = 1004;
	ll pref[N][N];
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			pref[i][j] = pref[i - 1][j] + pref[i][j - 1] - pref[i - 1][j - 1] + a[i][j]
		}
	}
	while(q--){
        int x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;
        int ans = pref[x2][y2] - pref[x2][y1 - 1] - pref[x1 - 1][y2] + pref[x1 - 1][y1 - 1];
        cout << ans << endl;
    }
-------------------------------------
Modular Arithmetic : 
-------------------------------------
(a + b) % mod == ((a % mod) + (b % mod)) % mod
(a . b) % mod == ((a % mod) . (b % mod)) % mod
(a - b) % mod == ((a % mod) - (b % mod) + mod) % mod
(a ^ b) % mod == ((a % mod) ^ b) % mod
------------------------------------------
double pi = 2 * acos (0.0);
------------------------------------------
Boyer-Moore Voting Algo to find majority element : O(n}, O(1) 
--------------------------------------------------------------
majority element = count > (n / 2) ; strictly more than half times

int majorityElement(vector<int>& nums) {
    int candidate = -1, count = 0;

    // Phase 1: Find the candidate
    for (int num : nums) {
        if (count == 0) {
            candidate = num;
        }
        count += (num == candidate) ? 1 : -1;
    }

    // Phase 2: Verify the candidate
    count = 0;
    for (int num : nums) {
        if (num == candidate) {
            count++;
        }
    }
    
    return (count > nums.size() / 2) ? candidate : -1; // Return -1 if no majority element
}
----------------------------------------------------------
Generating subset : O(2 ^ n)
------------------------------------------------------
void gen_subsets(vector<int> &v){ // BitMasking
    int n = v.size();
    int total = 1 << n; // 2 ^ n

    for(int mask = 0; mask < total; mask++){
        for(int i = 0; i < n; i++){
            if(mask & (1 << i)) cout << v[i] << " ";
        }
        cout << endl;
    }
}

void gen_subsets(vector<int>& subset, int i, vector<int> &v){
    if(i == v.size()){
        for(int n : subset) cout << n << " ";
        cout << endl;
        return;
    }
    gen_subsets(subset, i + 1, v);

    subset.push_back(v[i]);
    gen_subsets(subset, i + 1, v);
    subset.pop_back();
}

int main()
{   
    int n; cin >> n;
    vector<int> v(n);
    for(int i = 0; i < n; i++) cin >> v[i];

    gen_subsets(v);

    vector<int> subset;
    gen_subsets(subset, 0, v);
    return 0;
}
---------------------------------------------------------------
Unordered Map with Custom Hash to be safe from TLE : O(1)
---------------------------------------------------------------
struct custom_hash {
  static uint64_t splitmix64(uint64_t x) {
      x += 0x9e3779b97f4a7c15;
      x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
      x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
      return x ^ (x >> 31);
  }

  size_t operator()(uint64_t x) const {
      static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
      return splitmix64(x + FIXED_RANDOM);
  }
};
unordered_map<long long int, int, custom_hash> mp; // this will work when the key is an int or long long int
-------------------------------------------------------------------
A Common way to track MEX : 
------------------------------------------------------------------
# here we compute number of segment or non-overlapping subarray thats mex is MEX
            int seg = 0, mex = 0;
            unordered_map<int, int, custom_hash> mp;
            for(int i = 0; i < n; i++){
                if(v[i] < MEX) mp[v[i]]++;
                if(mp[v[i]] == 1) mex++;
                
                if(mex == MEX){
                    seg++;
                    mp.clear();
                    mex = 0;
                }
            }
-----------------------------------------------------------------
# struct MEXTracker {
    unordered_map<int, int> mp;
    int current_mex = 0;

    void add(int x) {
        mp[x]++;
        if (mp[current_mex] == 1) current_mex++;
    }

    void remove(int x) {
        freq[x]--;
        if (x < current_mex && mp[x] == 0) current_mex = x;
    }

    int get_mex() {
        return current_mex;
    }

    void reset() {
        freq.clear();
        current_mex = 0;
    }
};
----------------------------------------------------------------
Printing a Spiral : 
------------------------------------------------------------
void center_spiral(int r, int c, int n, int val, vector<vector<int>> &ans){
    if(r == n or c == n or r < 0 or c < 0 or ans[r][c] != -1) return;

    ans[r][c] = val--;
    while(c + 1 < n and ans[r][c + 1] == -1) ans[r][++c] = val--;
    while(r + 1 < n and ans[r + 1][c] == -1) ans[++r][c] = val--;
    while(c > 0 and ans[r][c - 1] == -1) ans[r][--c] = val--;
    while(r > 0 and ans[r - 1][c] == -1) ans[--r][c] = val--;

    center_spiral(r, c + 1, n, val, ans);
}
-----------------------------------------------------
Function to convert __int128 to string :
----------------------------------------------------
string to_string_i128(i128 n) {
    if (n == 0) return "0";
    string s;
    while (n > 0) {
        s += '0' + (n % 10);
        n /= 10;
    }
    reverse(s.begin(), s.end());
    return s;
}
-------------------------------------------------
Square matrix:
Rotation	From (i, j) to
90째 clockwise	(j, N - 1 - i)
180째	(N - 1 - i, N - 1 - j)
270째 clockwise	(N - 1 - j, i)
90째 counter-clockwise	(N - 1 - j, i)
------------------------------------------------
