Difference Array : 
-----------------------------------
	int n; cin >> n; // n = 5 
	vector<int> v(n + 1); // {1, 3, 5, 2, 4}
	for(int i = 1; i <= n; i++) cin >> v[i];
	vector<int> diff(n + 1); // {1, 2, 2, -3, 2}
	for(int i = 1; i <= n; i++){
		diff[i] = v[i] - v[i - 1];
  	}
  	for(int i = 1; i <= n; i++) cout << diff[i] << " ";
  
  	// Find the original array by prefix sum
  	for(int i = 1; i <= n; i++){
		v[i] = v[i - 1] + diff[i];
	}
  	for(int i = 1; i <= n; i++) cout << v[i] << " ";
------------------------------------
2D Difference Array : 
------------------------------------
	const int N = 1e3 + 9;
	ll d[N][N], a[N][N];
	while (q--) {
		int x1, y1, x2, y2, x; cin >> x1 >> y1 >> x2 >> y2 >> x;
		d[x1][y1] += x;
		d[x2 + 1][y1] -= x;
		d[x1][y2 + 1] -= x;
		d[x2 + 1][y2 + 1] += x;
	}
	
	for (int i = 1; i <= n; ++i) {
		for (int j = 1; j <= m; ++j) {
	        	d[i][j] += d[i - 1][j] + d[i][j - 1] - d[i - 1][j - 1];
		}
	}
	
	for (int i = 1; i <= n; ++i) {
		for (int j = 1; j <= m; ++j) {
	            	a[i][j] += d[i][j];
	        }
	}
------------------------------------
2D Prefix :
------------------------------------
	const int N = 1004;
	ll pref[N][N];
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			pref[i][j] = pref[i - 1][j] + pref[i][j - 1] - pref[i - 1][j - 1] + a[i][j]
		}
	}
	while(q--){
        int x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;
        int ans = pref[x2][y2] - pref[x2][y1 - 1] - pref[x1 - 1][y2] + pref[x1 - 1][y1 - 1];
        cout << ans << endl;
    }
-------------------------------------
Modular Arithmetic : 
-------------------------------------
(a + b) % mod == ((a % mod) + (b % mod)) % mod
(a . b) % mod == ((a % mod) . (b % mod)) % mod
(a - b) % mod == ((a % mod) - (b % mod) + mod) % mod
(a ^ b) % mod == ((a % mod) ^ b) % mod
------------------------------------------
double pi = 2 * acos (0.0);
