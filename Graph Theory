total Degree == 2 * total edges
The handshaking lemma : number of nodes having odd degree is always even
---------------------------
Adjacency Matrix : 
----------------------------
const int N = 105;
int g[N][N];
int32_t main()
{   
    int n, m; cin >> n >> m;
    while(m--){
        int u, v; cin >> u >> v;
        g[u][v] = 1;
        g[v][u] = 1;
    }
    if(g[4][2]) cout << "YES" << endl;
    else cout << "NO" << endl;
    
    return 0;
}
------------------------------
Adjacency List : 
------------------------------
const int N = 105;
vector<int> g[N];
int indeg[N], outdeg[N];
int32_t main()
{   
    int n, m; cin >> n >> m;
    while(m--){
        int u, v; cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
        indeg[v]++; // for Directed graph
        outdeg[u]++;
    }
    for(auto i : g[2]) cout << i << ' ';

    // degrees
    for(int i = 1; i <= n; i++) cout << g[i].size() << ' ';
    
    return 0;
}
------------------------------
DFS : 
------------------------------
const int N = 1e5 + 3;
vector<int> g[N];
bool vis[N];

void dfs(int u){
    // take action on vertex after entering the vertex
    vis[u] = 1;
    for(auto v : g[u]){
        if(!vis[v]){
            // take action on child before entering the child node
            dfs(v);
            // take action on child after exiting child node
        }
    }
    // take action on vertex before exiting the vertex
}
int32_t main()
{   
    int n, m; cin >> n >> m;
    while(m--){
        int u, v; cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    // dfs(1);
    // for(int i = 1; i <= n; i++){
    //     if(!vis[i]){
    //         cout << "Disconnected graph" << endl;
    //         return 0;
    //     }
    // }
    // cout << "Connected graph" << endl;

    int ans = 0;
    for(int i = 1; i <= n; i++){
        if(!vis[i]){
            dfs(i);
            ans++;
        }
    }
    cout << "Connected Components : " << ans << endl;
    return 0;
}
-----------------------------------------
DFS 2D : 
------------------------------------------
const int N = 103;
char g[N][N];
bool vis[N][N];
vector<pair<int, int>> d = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};
int n, m;
bool valid(int i, int j){
    if (i < 0 or i >= n or j < 0 or j >= m){
        return false;
    }
    return true;
}
void dfs(int si, int sj) {
    // work : cout << si << " " << sj << endl;
    vis[si][sj] = true;
    for (int i = 0; i < 4; i++){
        int ci = si + d[i].first;
        int cj = sj + d[i].second;
        if (valid(ci, cj) and !vis[ci][cj] and g[ci][cj] == '.') {
            dfs(ci, cj);
        }
    }
}
int main() {   
    cin >> n >> m;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            cin >> g[i][j];
        }
    }
    int si, sj;
    cin >> si >> sj;
    memset(vis, false, sizeof vis);
    if (valid(si, sj) && g[si][sj] == '.'){
        dfs(si, sj);
    }
    return 0;
}
-------------------------------------------
BFS : 
-------------------------------------------
const int N = 1e5 + 3;
vector<int> g[N]; 
bool vis[N];
int dis[N], par[N];

void bfs(int u){
    queue<int> q;
    q.push(u);
    vis[u] = 1;
    dis[u] = 0;
    while(!q.empty()){
        int u = q.front();
        q.pop();
        for(auto v : g[u]){
            if(!vis[v]){
                q.push(v);
                vis[v] = true;
                dis[v] = dis[u] + 1;
                par[v] = u;
            }
        }
    }
}

vector<int> path(int v) {
    vector<int> ans;
    if (!vis[v]) return ans;

    while (v != 0) { 
        ans.push_back(v);
        v = par[v];
    }
    reverse(ans.begin(), ans.end());
    return ans;
}

int32_t main()
{   
    int n, m; cin >> n >> m;
    while(m--){
        int u, v; cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    bfs(1);

    for(int i = 1; i <= n; i++){    // shortest dis from src node
        cout << dis[i] << " ";
    }
    
    int v = 4;  // Shortest path from src (1) to v (4)
    vector<int> shortest_path = path(v);
    
    if (shortest_path.empty()) 
        cout << "No path to node " << v << endl;
    else {
        cout << "Shortest path to node " << v << ": ";
        for (int node : shortest_path) 
            cout << node << " ";
        cout << endl;
    }

    return 0;
}
------------------------------------
BFS 2D : 
------------------------------------
const int N = 103;
char g[N][N];
bool vis[N][N];
int dis[N][N]; // shortest distance
vector<pair<int, int>> d = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};
int n, m;
bool valid(int i, int j){
    if (i < 0 or i >= n or j < 0 or j >= m){
        return false;
    }
    return true;
}
void bfs(int si, int sj) {
    queue<pair<int, int>> q;
    q.push({si, sj});
    vis[si][sj] = true;
    dis[si][sj] = 0;
    while(!q.empty()){
        pair<int, int> par = q.front();
        q.pop();
        // work : cout << si << " " << sj << endl;
        for(int i = 0; i < 4; i++){
            int ci = par.first + d[i].first;
            int cj = par.second + d[i].second;
            if(valid(ci, cj) and !vis[ci][cj] and g[ci][cj] == '.'){
                q.push({ci, cj});
                vis[ci][cj] = true;
                dis[ci][cj] = dis[par.first][par.second] + 1;
            }
        }

    }
}
int main() {   
    cin >> n >> m;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            cin >> g[i][j];
        }
    }
    int si, sj;
    cin >> si >> sj;
    memset(vis, false, sizeof vis);
    memset(dis, -1, sizeof dis);
    if (valid(si, sj) && g[si][sj] == '.'){
        bfs(si, sj);
    }
    return 0;
}
------------------------------------
Bicoloring & Bipartite : 
-----------------------------------
const int N = 1e6;
vector<int> g[N];
bool vis[N], ok;
int col[N];

void dfs(int u){
    vis[u] = true;
    for(auto v : g[u]){
        if(!vis[v]){
            col[v] = col[u] ^ 1;
            dfs(v);
        }
        else{
            if(col[u] == col[v]){
                ok = false;
            }
        }
    }
}
int32_t main()
{   
    int n, m; cin >> n >> m;
    while(m--){
        int u, v; cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    ok = true;
    for(int i = 1; i <= n; i++){
        if(!vis[i]) dfs(i);
    }
    if(ok) cout << "Bipartite" ;
    else cout << "not bipartite" ;
    
    return 0;
}
--------------------------------------------
Has Cycle or not & printing Cycle nodes : 
--------------------------------------------
const int N = 1e6 ;
vector<int> g[N];
int col[N], par[N];
bool cycle;

void dfs(int u){
    col[u] = 1;
    for(auto v : g[u]){
        if(col[v] == 0){
            par[v] = u;
            dfs(v);
        }
        else if(col[v] == 1){
            cycle = true;
            // you can track the cycle using par cycle
        }
    }
    col[u] = 2;
}
int32_t main()
{   
    int n, m; cin >> n >> m;
    for(int i = 1; i <= m; i++){
        int u, v; cin >> u >> v;
        g[u].push_back(v);
    }
    cycle = false;
    for(int i = 1; i <= n; i++){
        if(!col[i]){
            dfs(1);
        }
    }
    cout << (cycle ? "YES\n" : "NO\n");

    // if has cycle : printing cycle : 
    if(cycle){
        for(int i = 1; i <= n; i++) cout << par[i] << ' ';
    }

    return 0;
}
------------------------------------------------
topological sort : 
-----------------------------------------------
const int N = 1e6;
vector<int> g[N];
int indeg[N];
bool vis[N];
int32_t main()
{   
    int n, m; cin >> n >> m;
    while(m--){
        int u, v; cin >> u >> v;
        g[u].push_back(v);
        indeg[v]++;
    }
    vector<int> z;
    for(int i = 1; i <= n; i++){
        if(indeg[i] == 0){
            z.push_back(i);
            vis[i] = true;
        }
    }
    vector<int> ans;
    while(ans.size() < n){
        if(z.empty()){
            cout << "Impossible" << endl;
            return 0;
        }
        int cur = z.back();
        z.pop_back();
        ans.push_back(cur);
        for(auto v : g[cur]){
            indeg[v]--;
            if(!vis[v] and indeg[v] == 0){
                z.push_back(v);
                vis[v] = true;
            }
        }
    }
    for(auto x : ans) cout << x << ' ';
    
    return 0;
}
-------------------------------------------
Tree : finding depth & height : 
-------------------------------------------
vector<int> g[105];
int dep[105], height[105];
void dfs(int u, int p){
    for(auto v : g[u]){
        if(v != p){
            dep[v] = dep[u] + 1;
            dfs(v, u);
            height[u] = max(height[u], height[v] + 1);
        }
    }
}
int32_t main()
{   
    int n; cin >> n;    // n nodes (n - 1) edges in tree 
    for(int i = 1; i < n; i++){
        int u, v; cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(1, 0);

    for(int i = 1; i <= n; i++) cout << dep[i] << " ";
    cout << endl;
    for(int i = 1; i <= n; i++) cout << height[i] << " ";
    
    return 0;
}
---------------------------------------------
Tree : precomputing dfs : sub tree sum & even : 
-----------------------------------------------------
vector<int> g[105];
int sub_t_sum[105], even[105];
void dfs(int u, int p){
    sub_t_sum[u] += u;
    if(u % 2 == 0) even[u]++;
    for(auto v : g[u]){
        if(v != p){
            dfs(v, u);
            sub_t_sum[u] += sub_t_sum[v];
            even[u] += even[v];
        }
    }
}
int32_t main()
{   
    int n; cin >> n;    // n nodes (n - 1) edges in tree 
    for(int i = 1; i < n; i++){
        int u, v; cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(1, 0);
    int q; cin >> q;
    while(q--){
        int v; cin >> v;
        cout << sub_t_sum[v] << ' ' << even[v] << endl;
    }
    
    return 0;
}
--------------------------------------------
Tree : Diameter : 
-------------------------------------------
const int N = 1e6;
vector<int> g[N];
int dep[N];
int mx, node, ans;
void dfs1(int u, int p){
    dep[u] = dep[p] + 1;
    if(dep[u] > mx){
        mx = dep[u];
        node = u;
    }
    for(auto v : g[u]){
        if(v != p){
            dfs1(v, u);
        }
    }
}
void dfs2(int u, int p){
    dep[u] = dep[p] + 1;
    ans = max(ans, dep[u] - 1);
    for(auto v : g[u]){
        if(v != p){
            dfs2(v, u);
        }
    }
}

int32_t main()
{   
    int n; cin >> n;
    for(int i = 1; i < n; i++){
        int u, v; cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs1(1, 0);
    dfs2(node, 0);
    cout << ans << endl;
    
    return 0;
}
----------------------------------------------------
Lowest Common Ancestor / LCA : O (N) :
---------------------------------------------------
const int N = 1e5 + 5;
vector<int> g[N];
int par[N];

void dfs(int u, int p) {
    par[u] = p;
    for (int v : g[u]) {
        if (v != p) {
            dfs(v, u);
        }
    }
}

vector<int> path(int v) {
    vector<int> ans;
    while (v != 0) {
        ans.push_back(v);
        v = par[v];
    }
    reverse(ans.begin(), ans.end());
    return ans;
}

int find_lca(int x, int y) {
    vector<int> path_x = path(x);
    vector<int> path_y = path(y);

    int min_len = min(path_x.size(), path_y.size());
    int lca = -1;

    for (int i = 0; i < min_len; i++) {
        if (path_x[i] == path_y[i]) {
            lca = path_x[i];
        } else {
            break;
        }
    }
    return lca;
}

int main() {
    int n;
    cin >> n;
    
    memset(par, -1, sizeof(par));

    for (int i = 0; i < n - 1; i++) {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }

    dfs(1, 0);  // Assuming 1 as root

    int x, y;
    cin >> x >> y;
    cout << find_lca(x, y) << endl;

    return 0;
}

-------------------------------------------------
Dijkstra : single source shortest path, non negative weighted graph : O ( E log V)
--------------------------------------------------------------------------
const int N = 100;
vector<pair<int, int>> g[N];
int dis[N];

void dijkstra(int src) {
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;
    fill(dis, dis + N, INT_MAX); // Initialize distances

    dis[src] = 0;
    q.push({0, src}); // Push (distance, node)

    while (!q.empty()) {
        auto par = q.top();
        q.pop();
        
        int cost = par.first;
        int node = par.second;

        if (cost > dis[node]) continue;

        for (auto child : g[node]) {
            int child_node = child.first;
            int child_cost = child.second;

            if (cost + child_cost < dis[child_node]) {
                dis[child_node] = cost + child_cost;
                q.push({dis[child_node], child_node});
            }
        }
    }
}

int main() {   
    int n, m; 
    cin >> n >> m;
    
    while (m--) {
        int u, v, w; 
        cin >> u >> v >> w;
        g[u].push_back({v, w});
        g[v].push_back({u, w});
    }

    dijkstra(0);

    for (int i = 0; i < n; i++) {
        cout << i << " -> " << (dis[i] == INT_MAX ? -1 : dis[i]) << endl;
    }

    return 0;
}
--------------------------------------------------------------------------
Bellman Ford : single source shortest path , with negative weight : O( V E )
-----------------------------------------------------------------------------
class edge {
public:
    int u, v, w;
    edge(int u, int v, int w) {
        this->u = u;
        this->v = v;
        this->w = w;
    }
};

const int N = 1e5 + 5;
int dis[N];

int main() {
    int n, m;
    cin >> n >> m;
    vector<edge> edge_list;

    while (m--) {
        int u, v, w;
        cin >> u >> v >> w;
        edge_list.push_back(edge(u, v, w));
    }

    fill(dis, dis + n, INT_MAX);
    dis[0] = 0;

    // Bellman-Ford Algorithm
    for (int i = 1; i <= n - 1; i++) {
        for (edge e : edge_list) {
            int u = e.u, v = e.v, w = e.w;
            if (dis[u] < INT_MAX && dis[u] + w < dis[v]) {
                dis[v] = dis[u] + w;
            }
        }
    }

    // Negative Cycle Detection
    bool cycle = false;
    for (edge e : edge_list) {
        int u = e.u, v = e.v, w = e.w;
        if (dis[u] < INT_MAX && dis[u] + w < dis[v]) {
            cycle = true;
            break;
        }
    }

    if (cycle) {
        cout << "Negative cycle exists\n";
    } else {
        for (int i = 0; i < n; i++) {
            cout << (dis[i] == INT_MAX ? "INF" : to_string(dis[i])) << endl;
        }
    }

    return 0;
}
-----------------------------------------------------------------------























