Segment Tree :
-------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;
const int N = 1e5 + 3;
int a[N];

struct ST{
    int t[4 * N];
    static const int inf = 1e9;
    ST(){
        memset(t, 0, sizeof t);
    }

    void build(int n, int b, int e){
        if(b == e){
            t[n] = a[b];
            return;
        }

        int l = n << 1, r = l | 1, mid = (b + e) >> 1;

        build(l, b, mid);
        build(r, mid + 1, e);

        t[n] = max(t[l], t[r]); // change this
    }

    void upd(int n, int b, int e, int i, int x){
        if(i < b or e < i) return;
        if(b == e and b == i){
            t[n] = x; // update
            return;
        }

        int l = n << 1, r = l | 1, mid = (b + e) >> 1;

        upd(l, b, mid, i, x);
        upd(r, mid + 1, e, i, x);
        t[n] = max(t[l], t[r]); // change this
    }

    int query(int n, int b, int e, int i, int j){
        if(j < b or e < i) return -inf; // return appropriate value
        if(i <= b and e <= j) return t[n];

        int l = n << 1, r = l | 1, mid = (b + e) >> 1;

        return max(query(l, b, mid, i, j), query(r, mid + 1, e, i, j)); // change this
    }
}t;


int main()
{   
    int n; cin >> n;
    for(int i = 1; i <= n; i++) cin >> a[i];

    t.build(1, 1, n); // building segment tree , O(n)
    t.upd(1, 1, n, 2, 10); // assigning : a[2] = 10 , O(log n)
    cout << t.query(1, 1, n, 1, 5) << endl; // range max query on segment [1, 5] , O(log n) 

    return 0;
}
---------------------------------------------------------
DSU
---------------------------------------------------------
struct DSU{
    vector<int> par, Size, Rank;

    DSU(int n){
        par.resize(n + 1);
        Size.assign(n + 1, 1);
        Rank.assign(n + 1, 0);
        for(int i = 0; i <= n; i++) par[i] = i; 
    }

    int find(int u){
        if(u == par[u]) return u;
        return par[u] = find(par[u]);
    }

    bool unite(int u, int v){
        u = find(u);
        v = find(v);
        if(u == v) return false;
        if(Size[u] < Size[v]) swap(u, v);
        par[v] = u;
        Size[u] += Size[v];
        // if(Rank[u] < Rank[v]) swap(u, v);
        // par[v] = u;
        // if(Rank[u] == Rank[v]) Rank[u]++;
        return true;
    }
};

int main()
{   
    int n, k; cin >> n >> k;
    DSU dsu(n);

    while(k--){
        int u, v; cin >> u >> v;
        dsu.unite(u, v);
    }

    int component = 0;
    for(int i = 1; i <= n; i++){
        if(dsu.find(i) == i) component++;
    }
    cout << component;
    
    return 0;
}
-------------------------------------------------------------------------
Policy Based Data Structure : Ordered set 
--------------------------------------------------------------------------
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

template <typename T> using ord_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int main() {
    ord_set<int> se;

    se.insert(4);
    se.insert(2);
    se.insert(5);
    // sorted set se = [2, 4, 5]
    cout << se.order_of_key(5) << ' '; // number of elements < 5
    cout << se.order_of_key(6) << ' '; // number of elements < 6
    cout << (*se.find_by_order(1)) << ' '; // if you imagine this as a 0-indexed vector, what is se[1]?
    // output : 2 3 4
    return 0;
}
-----------------------------------------------------------------------
STL 
----------------------------------------------------------------------
multiset<int> mse;
| Code                            | Description                           | Time Complexity  |
| ------------------------------- | ------------------------------------- | ---------------- |
| mse.insert(x);                | Inserts `x`                           | O(log n)         |
| mse.erase(mse.find(x));       | Deletes **one** occurrence of `x`     | O(log n)         |
| mse.erase(x);                 | Deletes **all** occurrences of `x`    | O(log n + count) |
| int cnt = mse.count(x);       | Counts how many times `x` appears     | O(log n)         |
| auto it = mse.find(x);        | Iterator to any one occurrence of `x` | O(log n)         |
| int mx = *mse.rbegin();       | Returns **maximum** element           | O(1)             |
| int mn = *mse.begin();        | Returns **minimum** element           | O(1)             |
| auto lo = mse.lower_bound(x); | Iterator to first element **≥ `x`**   | O(log n)         |
| auto up = mse.upper_bound(x); | Iterator to first element **> `x`**   | O(log n)         |
| auto p = mse.equal_range(x);  | Pair of iterators `[≥x, >x)`          | O(log n)         |
| mse.clear();                  | Removes all elements                  | O(n)             |
| mse.size();                   | Total number of elements              | O(1)             |
| mse.empty();                  | Returns `true` if empty               | O(1)             |

